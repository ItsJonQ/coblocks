workflows:
  version: 2.1
  main:
    jobs:
      - lint_php:
          requires:
            - build
      - lint_js:
          requires:
            - build
      - lint_css:
          requires:
            - build
      - build:
          filters:
            tags:
              only: /^(?!canary).*$/
      # Support PHP Versions
      # http://php.net/supported-versions.php
      - unit_testing_php_56:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - build
            - lint_php
      - unit_testing_php_73:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - build
            - lint_php
      - unit_testing_js:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - build
            - lint_js
      - end_to_end_testing:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - build
            - lint_js
      # - canary-release:
      #     filters:
      #       branches:
      #         only: master
      # - i18n:
      #     filters:
      #       branches:
      #         only: master
      # - deploy:
      #     requires:
      #       - php56
      #       - php73
      #       - jest
      #       - e2e
      #     filters:
      #       tags:
      #         only: /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*)?(\+[0-9-]+(\.[0-9]+)*)?/ # Run on semantic version tags only
      #       branches:
      #         ignore: /.*/

version: 2.1
jobs:

  # Run phpcs on changed php files only.
  lint_php:
    docker:
      - image: circleci/php:7.3
    steps:
      - checkout
      - run:
          name: "Linting pre-check"
          command: |
            FILES=$(git diff HEAD^ --name-only --diff-filter=M '*.php')
            if [ -z $FILES ]; then
              echo "Changes do not require linting."
              circleci-agent step halt
            fi
      - restore_cache:
          keys:
            - composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
            - composer-deps-{{ .Branch }}
      - run:
          name: Install composer dependencies
          command: |
            composer install
      - save_cache:
          key: composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - ~/project/vendor
      - run:
          name: "Linting PHP"
          command: composer run lint $FILES

  # Run eslint on changed javascript files only.
  lint_js:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: "Linting pre-check"
          command: |
            FILES=$(git diff HEAD^ --name-only --diff-filter=M '*.js')
            if [ -z $FILES ]; then
              echo "Changes do not require linting."
              circleci-agent step halt
            fi
      - restore_cache:
          keys:
            - yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-deps-{{ .Branch }}
      - run:
          name: Install node dependencies
          command: |
            PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
            yarn install --frozen-lockfile
      - save_cache:
          key: yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
            - ~/.cache/yarn
      - run:
          name: "Linting JS"
          command: npm run lint:js $FILES

  # Run stylelint on changed stylesheet files only.
  lint_css:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: "Linting pre-check"
          command: |
            FILES=$(git diff HEAD^ --name-only --diff-filter=M '*.scss')
            if [ -z $FILES ]; then
              echo "Changes do not require linting."
              circleci-agent step halt
            fi
      - restore_cache:
          keys:
            - yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-deps-{{ .Branch }}
      - run:
          name: Install node dependencies
          command: |
            PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
            yarn install --frozen-lockfile
      - save_cache:
          key: yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
            - ~/.cache/yarn
      - run:
          name: "Linting CSS"
          command: npm run lint:css $FILES

  # 1. Download and cache node and composer dependencies.
  # 2. Build deployable plugin folder.
  # 3. Persist deployable plugin folder to workspace for other jobs.
  build:
    docker:
      - image: circleci/php:7.3-node
    steps:
      - checkout
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
            sudo rm -f /usr/local/etc/php/conf.d/*xdebug.ini
      - restore_cache:
          keys:
            - yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-deps-{{ .Branch }}
      - run:
          name: Install node dependencies
          command: |
            PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
            yarn install --frozen-lockfile
      - save_cache:
          key: yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
            - ~/.cache/yarn
      - restore_cache:
          keys:
            - composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
            - composer-deps-{{ .Branch }}
      - run:
          name: Install composer dependencies
          command: |
            composer install
      - save_cache:
          key: composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - ~/project/vendor
      - run:
          name: Build the plugin
          command: |
            npx wp-scripts build --config .dev/config/webpack.ci.config.js
            npx grunt clean:build copy:build
      - persist_to_workspace:
          root: ~/project
          paths:
            - build/coblocks
            - dist

  unit_testing_php_56:
    docker:
      - image: circleci/php:5.6
      - image: circleci/mysql:5.7
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
            - composer-deps-{{ .Branch }}
      - run:
          name: Install composer dependencies
          command: |
            composer install
      - save_cache:
          key: composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - ~/project/vendor
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
            sudo rm -f /usr/local/etc/php/conf.d/*xdebug.ini
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: "Install Dependencies"
          command: |
            bash .dev/bin/install-dependencies.sh
            cp -a $HOME/project /tmp/wordpress/wp-content/plugins/coblocks
      - run:
          name: "Run PHPUnit - Single Site - Generate Coverage Reports"
          command: composer run test -- --coverage-html=/tmp/artifacts/code-coverage/phpunit/html --log-junit=/tmp/artifacts/code-coverage/phpunit/results.xml
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: phpunit-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/
      - run:
          name: "Run PHPUnit - Multi Site"
          command: WP_MULTISITE=1 composer run test
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks

  unit_testing_php_73:
    docker:
      - image: circleci/php:7.3
      - image: circleci/mysql:5.7
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
            - composer-deps-{{ .Branch }}
      - run:
          name: Install composer dependencies
          command: |
            composer install
      - save_cache:
          key: composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - ~/project/vendor
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
            sudo rm -f /usr/local/etc/php/conf.d/*xdebug.ini
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: "Install Dependencies"
          command: |
            bash .dev/bin/install-dependencies.sh
            cp -a $HOME/project /tmp/wordpress/wp-content/plugins/coblocks
      - run:
          name: "Run PHPUnit - Single Site - Generate Coverage Reports"
          command: composer run test -- --coverage-html=/tmp/artifacts/code-coverage/phpunit/html --log-junit=/tmp/artifacts/code-coverage/phpunit/results.xml
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: phpunit-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/
      - run:
          name: "Run PHPUnit - Multi Site"
          command: WP_MULTISITE=1 composer run test
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks

  unit_testing_js:
    docker:
      - image: circleci/node:latest-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-deps-{{ .Branch }}
      - run:
          name: Install node dependencies
          command: |
            yarn install --frozen-lockfile
      - save_cache:
          key: yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
            - ~/.cache/yarn
      - run:
          name: Run Jest tests
          command: |
            JEST_JUNIT_OUTPUT_DIR="/tmp/artifacts/code-coverage/jest/"
            JEST_JUNIT_OUTPUT_NAME="results.xml"

            if [ "$CIRCLE_BRANCH" == "master" ] || [ "$CIRCLE_BRANCH" == "develop" ]; then
              npm run test:unit -- --ci --runInBand --reporters="default" --reporters="jest-junit" --coverage --coverageDirectory=/tmp/artifacts/code-coverage/jest/html
            else
              FILES=$(git diff HEAD^ --name-only --diff-filter=M '*.js')
              npm run test:unit -- --ci --runInBand --reporters="default" --reporters="jest-junit" --coverage --coverageDirectory=/tmp/artifacts/code-coverage/jest/html --findRelatedTests $FILES
            fi
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: jest-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/

  end_to_end_testing:
    docker:
      - image: circleci/php:latest-node-browsers-legacy
      - image: circleci/mysql:5.7
    parallelism: 4
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Setup spec files to run based on git diff-tree
          command: bash .dev/bin/setup-test-specs.sh
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
            sudo rm -f /usr/local/etc/php/conf.d/*xdebug.ini
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Update hosts
          command: echo 127.0.0.1 coblocks.test | sudo tee -a /etc/hosts
      - run:
          name: "Install WordPress"
          command: |
            ./vendor/bin/wp config create --dbhost=127.0.0.1 --dbname=coblocks --dbuser=root --dbpass='' --path=/tmp/wordpress
            ./vendor/bin/wp core install --url="http://coblocks.test" --title=CoBlocks --admin_user=admin --admin_password=password --admin_email=test@admin.com --skip-email --path=/tmp/wordpress
            ./vendor/bin/wp plugin activate coblocks --path=/tmp/wordpress
      - run:
          name: "Start WPCLI Server"
          command: sudo ./vendor/bin/wp server --host=0.0.0.0 --port=80 --allow-root  --path=/tmp/wordpress
          background: true
      - run:
          name: "Run end to end tests (Cypress.io)"
          command: |
            touch cypress.env.json
            echo '{"wpUsername":"admin","wpPassword":"password","testURL":"http://coblocks.test"}' | jq . > cypress.env.json
            ./node_modules/.bin/cypress run --config integrationFolder=./ --browser chrome --record --parallel --spec "$(cat /tmp/specstring)"

  i18n:
    docker:
      - image: circleci/php:7.3-node-browsers-legacy
    steps:
      - add_ssh_keys:
          fingerprints:
            - "14:ee:bc:31:0f:50:7e:fe:8b:56:87:f8:56:db:48:5b"
      - checkout
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
            sudo rm -f /usr/local/etc/php/conf.d/*xdebug.ini
      - restore_cache:
          keys:
            - yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-deps-{{ .Branch }}
      - run:
          name: Install node dependencies
          command: |
            yarn install --frozen-lockfile
      - save_cache:
          key: yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
            - ~/.cache/yarn
      - restore_cache:
          keys:
            - composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
            - composer-deps-{{ .Branch }}
      - run:
          name: Install composer dependencies
          command: |
            composer install
      - save_cache:
          key: composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - /home/circleci/project/vendor
      - run:
          name: Generate the translations
          command: |
            npx grunt update-pot
      - run:
          name: Deploy coblocks.pot/coblocks.json back to GitHub
          command: |
            export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)
            if [[ $GIT_COMMIT_DESC != *"skip i18n"* ]]; then
              git config --global user.email "plugins@godaddy.com"
              git config --global user.name "GoDaddy Translator"
              git add languages/coblocks.json
              git add languages/coblocks.pot
              git commit -m "Update coblocks.pot/coblocks.json files [skip i18n]"
              git push origin master --quiet
            fi

  canary-release:
    docker:
      - image: circleci/golang:latest-node-browsers-legacy
    steps:
      - add_ssh_keys:
          fingerprints:
            - "0e:f8:0a:19:88:42:c3:5a:b9:82:17:34:6b:40:68:21"
      - checkout
      - run:
          name: Add CoBlocks i18n staging site to known_hosts
          command: ssh-keyscan -H a90.8f7.myftpupload.com >> ~/.ssh/known_hosts
      - run:
          name: Install PHP
          command: sudo apt-get install php libapache2-mod-php php-mbstring php-xml php-curl
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
            sudo rm -f /usr/local/etc/php/conf.d/*xdebug.ini
      - run:
          name: Install Composer
          command: |
            wget https://raw.githubusercontent.com/composer/getcomposer.org/master/web/installer -O composer-setup.php
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
            sudo mv composer.phar /usr/local/bin/composer
      - restore_cache:
          keys:
            - yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-deps-{{ .Branch }}
      - run:
          name: Install node dependencies
          command: |
            yarn install --frozen-lockfile
      - save_cache:
          key: yarn-deps-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
            - ~/.cache/yarn
      - restore_cache:
          keys:
            - composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
            - composer-deps-{{ .Branch }}
      - run:
          name: Install composer dependencies
          command: |
            composer install
      - save_cache:
          key: composer-deps-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - /home/circleci/project/vendor
      - run:
          name: Install ghr
          command: |
            go get -u github.com/tcnksm/ghr
      - run:
          name: Build the plugin
          command: |
            mkdir -p /tmp/artifacts
            npx grunt build
            COBLOCKS_VERSION_LINE=$(awk '/\* Version:/{ print NR; exit }' build/coblocks/class-coblocks.php)
            COBLOCKS_COMMIT_HASH=$(git rev-parse --verify HEAD | head -c 7)
            sed -i -e "${COBLOCKS_VERSION_LINE}s/$/-${COBLOCKS_COMMIT_HASH}/" build/coblocks/class-coblocks.php
            npm run json2po
            npm run po2mo
            npm run po2jed
            rm -f languages/*.po languages/*.pot languages/coblocks.json
            find languages/ -type f ! -name 'coblocks*' -exec rm {} \;
            cp -r languages/ build/coblocks/languages/
            cd build && zip -r coblocks-canary.zip coblocks
            mv coblocks-canary.zip /tmp/artifacts/coblocks-canary.zip
      - run:
          name: Deploy plugin to the CoBlocks i18n staging site
          command: |
            scp -r /tmp/artifacts/coblocks-canary.zip ${STAGING_SITE_SSH_CREDS}:html/wp-content/
            ssh ${STAGING_SITE_SSH_CREDS} 'cd html/wp-content && wp plugin install coblocks-canary.zip --force --activate --skip-themes --skip-plugins && rm -rf coblocks-canary.zip languages/plugins/coblocks-*'
      - deploy:
          name: Create a canary release on GitHub
          command: ghr -t ${GH_ACCESS_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -b "Latest build of the master branch. This bleeding edge version is for testing purposes only and should not be used in production." -delete -prerelease -replace canary /tmp/artifacts/coblocks-canary.zip

  deploy:
    docker:
      - image: circleci/golang:latest-node-browsers-legacy
    steps:
      - checkout
      - run:
          name: Update npm
          command: sudo yarn install --frozen-lockfile -g npm@latest
      - run:
          name: Install Grunt.js
          command: sudo yarn install --frozen-lockfile -g grunt-cli
      - run:
          name: Install SVN
          command: sudo apt-get update && sudo apt-get install subversion
      - run:
          name: Install PHP
          command: sudo apt-get install php libapache2-mod-php php-mbstring
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
      - run:
          name: Install gettext
          command: sudo apt-get install gettext
      - run:
          name: Install WP-CLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
      - run:
          name: Install ghr
          command: |
            go get -u github.com/tcnksm/ghr
      - run:
          name: Install node packages
          command: |
            npm uninstall cypress
            yarn install --frozen-lockfile
      - run:
          name: Build the plugin
          command: |
            mkdir -p /tmp/artifacts
            grunt build
            grunt compress
            mv build/*.zip /tmp/artifacts
      - deploy:
          name: Deploy the plugin
          command: bash .dev/bin/deploy-plugin.sh
      - store_artifacts:
          path: /tmp/artifacts
